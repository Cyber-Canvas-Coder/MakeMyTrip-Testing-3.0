<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="13" passed="13" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-09-13T21:59:45 IST" name="RegressionSuite" finished-at="2025-09-13T22:05:03 IST" duration-ms="318767">
    <groups>
      <group name="smoke">
        <method signature="HotelTest.hotelSearchWithFutureDatesTest()[pri:0, instance:tests.HotelTest@70e38ce1]" name="hotelSearchWithFutureDatesTest" class="tests.HotelTest"/>
        <method signature="LoginTest.EnterLoginCredential()[pri:1, instance:tests.LoginTest@2e570ded]" name="EnterLoginCredential" class="tests.LoginTest"/>
        <method signature="FlightTest.OneWayTrip()[pri:2, instance:tests.FlightTest@4808bc9b]" name="OneWayTrip" class="tests.FlightTest"/>
        <method signature="LoginTest.testClosePopup()[pri:2, instance:tests.LoginTest@2e570ded]" name="testClosePopup" class="tests.LoginTest"/>
      </group> <!-- smoke -->
    </groups>
    <test started-at="2025-09-13T21:59:45 IST" name="MakeMyTripTests" finished-at="2025-09-13T22:05:03 IST" duration-ms="318767">
      <class name="tests.LoginTest">
        <test-method is-config="true" signature="openBrowser(java.lang.String)[pri:0, instance:tests.LoginTest@2e570ded]" started-at="2025-09-13T21:59:45 IST" name="openBrowser" finished-at="2025-09-13T21:59:52 IST" duration-ms="7616" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[firefox]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- openBrowser -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:tests.LoginTest@2e570ded]" started-at="2025-09-13T21:59:52 IST" name="logTestStart" finished-at="2025-09-13T21:59:52 IST" duration-ms="18" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.LoginTest.EnterLoginCredential() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="EnterLoginCredential()[pri:1, instance:tests.LoginTest@2e570ded]" started-at="2025-09-13T21:59:52 IST" name="EnterLoginCredential" finished-at="2025-09-13T21:59:55 IST" duration-ms="2490" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- EnterLoginCredential -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:tests.LoginTest@2e570ded]" started-at="2025-09-13T21:59:55 IST" name="logTestStart" finished-at="2025-09-13T21:59:55 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.LoginTest.testClosePopup()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="testClosePopup()[pri:2, instance:tests.LoginTest@2e570ded]" started-at="2025-09-13T21:59:55 IST" name="testClosePopup" finished-at="2025-09-13T21:59:55 IST" duration-ms="258" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testClosePopup -->
        <test-method is-config="true" signature="destroyBrowser()[pri:0, instance:tests.LoginTest@2e570ded]" started-at="2025-09-13T21:59:55 IST" name="destroyBrowser" finished-at="2025-09-13T21:59:57 IST" duration-ms="1748" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- destroyBrowser -->
      </class> <!-- tests.LoginTest -->
      <class name="tests.HotelTest">
        <test-method is-config="true" signature="setup(java.lang.String)[pri:0, instance:tests.HotelTest@70e38ce1]" started-at="2025-09-13T22:01:02 IST" name="setup" finished-at="2025-09-13T22:01:11 IST" duration-ms="8981" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[firefox]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:tests.HotelTest@70e38ce1]" started-at="2025-09-13T22:01:11 IST" name="logTestStart" finished-at="2025-09-13T22:01:11 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.HotelTest.hotelSearchWithFutureDatesTest() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="hotelSearchWithFutureDatesTest()[pri:0, instance:tests.HotelTest@70e38ce1]" started-at="2025-09-13T22:01:11 IST" name="hotelSearchWithFutureDatesTest" description="Search hotels in a valid location with future check-in and check-out dates" finished-at="2025-09-13T22:01:18 IST" duration-ms="7022" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hotelSearchWithFutureDatesTest -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:tests.HotelTest@70e38ce1]" started-at="2025-09-13T22:01:18 IST" name="logTestStart" finished-at="2025-09-13T22:01:18 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.HotelTest.hotelFilterApplicationTest() throws java.lang.InterruptedException,java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="hotelFilterApplicationTest()[pri:1, instance:tests.HotelTest@70e38ce1]" started-at="2025-09-13T22:01:18 IST" name="hotelFilterApplicationTest" description="Apply filters like star rating, amenities, and price range" finished-at="2025-09-13T22:03:26 IST" duration-ms="127688" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hotelFilterApplicationTest -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:tests.HotelTest@70e38ce1]" started-at="2025-09-13T22:03:26 IST" name="logTestStart" finished-at="2025-09-13T22:03:26 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.HotelTest.hotelSortResults() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="hotelSortResults()[pri:2, instance:tests.HotelTest@70e38ce1]" started-at="2025-09-13T22:03:26 IST" name="hotelSortResults" description="Sort hotel results by rating or lowest price" finished-at="2025-09-13T22:03:57 IST" duration-ms="30780" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hotelSortResults -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:tests.HotelTest@70e38ce1]" started-at="2025-09-13T22:03:57 IST" name="logTestStart" finished-at="2025-09-13T22:03:57 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.HotelTest.hotelDetailPageValidation() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="hotelDetailPageValidation()[pri:3, instance:tests.HotelTest@70e38ce1]" started-at="2025-09-13T22:03:57 IST" name="hotelDetailPageValidation" description="Open hotel detail page and verify room types and prices" finished-at="2025-09-13T22:04:01 IST" duration-ms="3968" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hotelDetailPageValidation -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:tests.HotelTest@70e38ce1]" started-at="2025-09-13T22:04:01 IST" name="logTestStart" finished-at="2025-09-13T22:04:01 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.HotelTest.hotelRoomBooking() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="hotelRoomBooking()[pri:4, instance:tests.HotelTest@70e38ce1]" started-at="2025-09-13T22:04:01 IST" name="hotelRoomBooking" description="Book a hotel room with valid guest details" finished-at="2025-09-13T22:04:11 IST" duration-ms="10259" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hotelRoomBooking -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:tests.HotelTest@70e38ce1]" started-at="2025-09-13T22:04:11 IST" name="logTestStart" finished-at="2025-09-13T22:04:11 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.HotelTest.hotelSearchWithPastCheckinDate()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="hotelSearchWithPastCheckinDate()[pri:5, instance:tests.HotelTest@70e38ce1]" started-at="2025-09-13T22:04:11 IST" name="hotelSearchWithPastCheckinDate" description="Search with past check-in date should show validation error" finished-at="2025-09-13T22:04:20 IST" duration-ms="8925" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hotelSearchWithPastCheckinDate -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:tests.HotelTest@70e38ce1]" started-at="2025-09-13T22:04:20 IST" name="logTestStart" finished-at="2025-09-13T22:04:20 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.HotelTest.hotelSearchWithSameCheckinCheckoutDate()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="hotelSearchWithSameCheckinCheckoutDate()[pri:6, instance:tests.HotelTest@70e38ce1]" started-at="2025-09-13T22:04:20 IST" name="hotelSearchWithSameCheckinCheckoutDate" description="Same check-in and check-out date should show validation error" finished-at="2025-09-13T22:04:54 IST" duration-ms="34380" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hotelSearchWithSameCheckinCheckoutDate -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:tests.HotelTest@70e38ce1]" started-at="2025-09-13T22:04:54 IST" name="logTestStart" finished-at="2025-09-13T22:04:54 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.HotelTest.hotelSearchWithoutDestination() throws java.io.IOException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="hotelSearchWithoutDestination()[pri:7, instance:tests.HotelTest@70e38ce1]" started-at="2025-09-13T22:04:54 IST" name="hotelSearchWithoutDestination" description="Search without entering destination should show validation error" finished-at="2025-09-13T22:05:02 IST" duration-ms="7510" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hotelSearchWithoutDestination -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.HotelTest@70e38ce1]" started-at="2025-09-13T22:05:02 IST" name="tearDown" finished-at="2025-09-13T22:05:03 IST" duration-ms="1434" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.HotelTest -->
      <class name="tests.FlightTest">
        <test-method is-config="true" signature="openBrowser(java.lang.String)[pri:0, instance:tests.FlightTest@4808bc9b]" started-at="2025-09-13T21:59:57 IST" name="openBrowser" finished-at="2025-09-13T22:00:36 IST" duration-ms="39154" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[firefox]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- openBrowser -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:tests.FlightTest@4808bc9b]" started-at="2025-09-13T22:00:36 IST" name="logTestStart" finished-at="2025-09-13T22:00:36 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.FlightTest.ads()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="ads()[pri:1, instance:tests.FlightTest@4808bc9b]" started-at="2025-09-13T22:00:36 IST" name="ads" finished-at="2025-09-13T22:00:37 IST" duration-ms="637" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ads -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:tests.FlightTest@4808bc9b]" started-at="2025-09-13T22:00:37 IST" name="logTestStart" finished-at="2025-09-13T22:00:37 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.FlightTest.OneWayTrip() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="OneWayTrip()[pri:2, instance:tests.FlightTest@4808bc9b]" started-at="2025-09-13T22:00:37 IST" name="OneWayTrip" finished-at="2025-09-13T22:00:53 IST" duration-ms="16579" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- OneWayTrip -->
        <test-method is-config="true" signature="logTestStart(java.lang.reflect.Method)[pri:0, instance:tests.FlightTest@4808bc9b]" started-at="2025-09-13T22:00:53 IST" name="logTestStart" finished-at="2025-09-13T22:00:53 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void tests.FlightTest.RoundTrip() throws java.lang.InterruptedException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logTestStart -->
        <test-method signature="RoundTrip()[pri:3, instance:tests.FlightTest@4808bc9b]" started-at="2025-09-13T22:00:53 IST" name="RoundTrip" finished-at="2025-09-13T22:01:01 IST" duration-ms="7554" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- RoundTrip -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:tests.FlightTest@4808bc9b]" started-at="2025-09-13T22:01:01 IST" name="tearDown" finished-at="2025-09-13T22:01:02 IST" duration-ms="1586" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- tests.FlightTest -->
    </test> <!-- MakeMyTripTests -->
  </suite> <!-- RegressionSuite -->
</testng-results>
